# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage, QPixmap
from analysis import data_process, pose
from PyQt5.QtCore import pyqtSignal, QTimer, QUrl
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtWidgets import * 
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
import numpy as np
import cv2
import time
import threading

class AnotherWindow(QWidget):
    """
    This "window" is a QWidget. If it has no parent, it
    will appear as a free-floating window as we want.
    """
    def __init__(self):
        super().__init__()        
        layout = QVBoxLayout()
        #layout.setGeometry(QtCore.QRect(0, 0, 20, 32))
        self.label = QLabel("Processing ... ")
        layout.addWidget(self.label)
        self.setLayout(layout)
        self.setGeometry(1200, 800, 500, 500)
        self.show()


class Ui_MainWindow(object):
    update_signal = pyqtSignal(np.ndarray)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(977, 775)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.video_widget = QtWidgets.QLabel(self.centralwidget)
        self.video_widget.setGeometry(QtCore.QRect(50, 40, 541, 321))
        self.video_widget.setObjectName("video_widget")

        self.openfile_btn = QtWidgets.QPushButton(self.centralwidget)
        self.openfile_btn.setGeometry(QtCore.QRect(40, 460, 161, 31))
        self.openfile_btn.setObjectName("openfile")
        self.openfile_btn.clicked.connect(self.open_file)

        self.playing = True
        self.pause = QtWidgets.QPushButton(self.centralwidget)
        self.pause.setGeometry(QtCore.QRect(220, 460, 101, 31))
        self.pause.setObjectName("pause")
        #self.pause.setEnabled(False)
        self.pause.clicked.connect(self.play)

        self.jumpingheight = QtWidgets.QLabel(self.centralwidget)
        self.jumpingheight.setGeometry(QtCore.QRect(40, 520, 350, 31))
        self.jumpingheight.setObjectName("jumpingheight")

        self.calculating = False
        self.calculateangle = QtWidgets.QPushButton(self.centralwidget)
        self.calculateangle.setGeometry(QtCore.QRect(350, 460, 250, 31))
        self.calculateangle.setObjectName("calculateangle")
        self.calculateangle.clicked.connect(self.angle)

        self.approachspeed = QtWidgets.QLabel(self.centralwidget)
        self.approachspeed.setGeometry(QtCore.QRect(40, 560, 380, 31))
        self.approachspeed.setObjectName("approachspeed")

        self.label_angle1 = QtWidgets.QLabel(self.centralwidget)
        self.label_angle1.setGeometry(QtCore.QRect(40, 600, 350, 31))
        self.label_angle1.setObjectName("angle")
        self.label_angle2 = QtWidgets.QLabel(self.centralwidget)
        self.label_angle2.setGeometry(QtCore.QRect(40, 640, 450, 31))
        self.label_angle2.setObjectName("angle")

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(640, 30, 311, 651))
        self.widget.setObjectName("widget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.jumping = QtWidgets.QLabel(self.widget)
        self.jumping.setObjectName("jumping")

        self.verticalLayout.addWidget(self.jumping)
        self.center = QtWidgets.QLabel(self.widget)
        self.center.setObjectName("center")

        self.verticalLayout.addWidget(self.center)
        self.position = QtWidgets.QLabel(self.widget)
        self.position.setObjectName("position")

        self.verticalLayout.addWidget(self.position)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 977, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

         # creating progress bar
        #self.pbar = QProgressBar(self.centralwidget)
        # setting its geometry
        #self.pbar.setGeometry(QtCore.QRect(40, 600, 500, 31))

        self.jumping_height = 0
        self.aprroachingspeed = 0

        self.timer = QTimer()
        self.timer.start(33)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def play(self):
        self.playing = not self.playing

    def angle(self):
        self.calculating = not self.calculating

    def video_play(self) :
        self.cap = cv2.VideoCapture("result/output.mp4")
        num = 0
        if not self.cap.isOpened() :
            exit()

        while True :

            ret, self.frame = self.cap.read()
            if not ret:
                break
            
            num = num + 1
            self.frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
            while self.playing == False : 
                cv2.waitKey(30)
                self.origin_height, self.origin_width, self.origin_channel = self.frame.shape
                bytesPerline = self.origin_width * self.origin_channel
                self.qimg = QImage(self.frame.data, self.origin_width, self.origin_height, bytesPerline, QImage.Format_RGB888)
                self.origin_qpixmap = QPixmap.fromImage(self.qimg)
                self.qpixmap = self.origin_qpixmap.scaledToHeight(self.video_widget.height())
                #print(self.qpixmap)
                #self.video_widget.resize(self.origin_qpixmap.size())
                self.video_widget.setPixmap(self.origin_qpixmap)
                self.video_widget.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
                #self.video_widget.show()
                if self.calculating == True :
                    str1 = "The Right Elbow's angle :  " + str(round(pose.right_elbow_angle[num], 2)) 
                    _translate = QtCore.QCoreApplication.translate
                    self.label_angle1.setText(_translate("MainWindow", str1))
                    self.calculating = False                  

            # self.frame = cv2.resize(self.frame, (541, 321))   # 改變尺寸和視窗相同
            #self.frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB) 
            cv2.waitKey(30)
            self.origin_height, self.origin_width, self.origin_channel = self.frame.shape
            bytesPerline = self.origin_width * self.origin_channel
            self.qimg = QImage(self.frame.data, self.origin_width, self.origin_height, bytesPerline, QImage.Format_RGB888)
            self.origin_qpixmap = QPixmap.fromImage(self.qimg)
            self.qpixmap = self.origin_qpixmap.scaledToHeight(self.video_widget.height())
            #print(self.qpixmap)
            #self.video_widget.resize(self.origin_qpixmap.size())
            self.video_widget.setPixmap(self.origin_qpixmap)
            self.video_widget.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
            #self.video_widget.show()
            time.sleep(50/1000)
    



    def img_display(self) :
        try:
            self.img1 = cv2.imread("result/Jumping_height.jpg")
            self.img2 = cv2.imread("result/center_height.jpg")
            self.img3 = cv2.imread("result/The_Player's_Position.jpg")
            self.img1_origin_height, self.img1_origin_width, self.img1_origin_channel = self.img1.shape
            self.img2_origin_height, self.img2_origin_width, self.img2_origin_channel = self.img2.shape 
            self.img3_origin_height, self.img3_origin_width, self.img3_origin_channel = self.img3.shape           
        except:
            print("Can't get Analysis img ")
            # self.img = cv2.imread('test.jpg')
            # self.origin_height, self.origin_width, self.origin_channel = self.img.shape   

        bytesPerline1 = 3 * self.img1_origin_width
        self.qimg1 = QImage(self.img1, self.img1_origin_width, self.img1_origin_height, bytesPerline1, QImage.Format_RGB888).rgbSwapped()
        self.origin_qpixmap1 = QPixmap.fromImage(self.qimg1)
        self.qpixmap1 = self.origin_qpixmap1.scaledToHeight(self.jumping.height())
        self.jumping.setPixmap(self.qpixmap1)
        self.jumping.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        
        bytesPerline2 = 3 * self.img2_origin_width
        self.qimg2 = QImage(self.img2, self.img2_origin_width, self.img2_origin_height, bytesPerline2, QImage.Format_RGB888).rgbSwapped()
        self.origin_qpixmap2 = QPixmap.fromImage(self.qimg2)
        self.qpixmap2 = self.origin_qpixmap2.scaledToHeight(self.center.height())
        self.center.setPixmap(self.qpixmap2)
        self.center.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        bytesPerline3 = 3 * self.img3_origin_width
        self.qimg3 = QImage(self.img3, self.img3_origin_width, self.img3_origin_height, bytesPerline3, QImage.Format_RGB888).rgbSwapped()
        self.origin_qpixmap3 = QPixmap.fromImage(self.qimg3)
        self.qpixmap3 = self.origin_qpixmap3.scaledToHeight(self.position.height())
        self.position.setPixmap(self.qpixmap3)
        self.position.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

    def set_jumpingheight(self, x, y) :
        str1 = "The Jumping Height : " + str(round(x,2)) + " cm"
        _translate = QtCore.QCoreApplication.translate
        self.jumpingheight.setText(_translate("MainWindow", str1))
        str2 = "The Speed Of Approaching : " + str(round(y,2)) + " cm/s"
        self.approachspeed.setText(_translate("MainWindow", str2))


    def doAction(self):
        
        video = cv2.VideoCapture(self.video_path)
        fps = video.get(cv2.CAP_PROP_FPS)
        all_time = fps * 0.4

        # setting for loop to set value of progress bar
        for i in range(100):
            # slowing down the loop
            time.sleep(all_time/0.4)
  
            # setting value to progress bar

            self.pbar.setValue(i)


    def open_file(self) :
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("Video Files (*.mp4 *.flv *.ts *.mts *.avi)") 
        if file_dialog.exec_():
            file_path = file_dialog.selectedFiles()[0]
            self.video_path = file_path
            w = AnotherWindow()
            w.show()
            self.thread_p = QThread()
            self.thread_p.run = pose.pose(self.video_path)
            self.thread_p.start()
            w.close()
            #self.thread_b = QThread()
            #self.thread_b.run = self.doAction
            #self.thread_b.start()
            #self.centralwidget.show()
            #p = pose
            #p.pose(self.video_path)
            self.set_jumpingheight(pose.jump_height, pose.approach_speed)
            self.img_display()
            self.video_play()
        
            
        

    def playing(self) :
        if self.cap_video.isOpened() and self.pause :
            ret, self.cap = self.cap_video.read()
            if ret :
                self.original_height, self.original_width = self.cap.shape
                q_image = QImage(self.cap, self.original_width, self.original_height, QImage.Format_RGB888)
                self.video_widget.setPixmap(QPixmap.fromImage(q_image).scaledToWidth(self.original_width))
                
            


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.video_widget.setText(_translate("MainWindow", ""))
        self.openfile_btn.setText(_translate("MainWindow", "Open File"))
        self.pause.setText(_translate("MainWindow", "Pause"))
        self.jumpingheight.setText(_translate("MainWindow", "The Jumping Height : "))
        self.calculateangle.setText(_translate("MainWindow", "Calculate Elbow's Angle"))
        self.approachspeed.setText(_translate("MainWindow", "The Speed Of Approaching :"))
        self.label_angle1.setText(_translate("MainWindow", "The Right Elbow's Angle : "))
        self.jumping.setText(_translate("MainWindow", ""))
        self.center.setText(_translate("MainWindow", ""))
        self.position.setText(_translate("MainWindow", ""))
        self.label_angle2.setText(_translate("MainWindow", "( Remark : zero is the angle can't be calculated )"))  





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
